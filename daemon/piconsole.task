# This is a task file, used to define settings for tasks in a neat way.
# You can use a file like this, rather than command line options.
# You don't have to use a task file, it is optional. You have more control
# over your task as you can define more settings in this file.

# Settings in this task file take precedence over command line settings,
# with the exception of environment variables. Environment variables set on
# the command line override those here.

# The file is Windows INI format.
# <-- lines beginning with # are a comment
# [this_is_a_section]
# key=value

##############################################################################
# Configure task properties
##############################################################################
[task]

# Task path. The full path name to the daemon program.
# Leave it blank to be relative to the godaemon directory.
#path=/rfhadaemon

# Task program name. This is added to the <path> setting to find the daemon.
# By default this is the name passed on the command line to find the task file.
# (So if your task file is foo.task, <name> is foo)
# You can change that.
#name=rfhadaemon

# Specify any additional command line parameters to pass to the program here.
# If this is blank, then any extra command line parameters passed to the
# godaemon command line will be passed to the program instead.
commandline=

# Do you want godaemon to run the task as a different user ID / group ID?
# 0 = run as the same user/group as godaemon
# 1 = change to a different user and group
changeuser=0

# The user id to run the task as.
# You can specify a uid number, or a user name.
userid=rfha

# The group id to run the task as.
# You can specify a gid number, or a group name.
groupid=rfha

##############################################################################
# Configure settings for the safety throttle (for restarting failed tasks)
##############################################################################
[safetythrottle]

# Use the safety throttle?
# If you don't use the safety throttle, godaemon will restart the task forever
# as quickly as possible without delay, until godaemon is stopped.
# If you do use the safety throttle, then see the other options in this
# section to configure it.
safetythrottle=1

# If the task fails more than <maxfailures> in <timespan> seconds, then
# godaemon will not restart the task; godaemon will stop.
timespan=900
maxfailures=5

# You can set maxfailures to -1 to restart the task endlessly. This is still
# better than disabling the safety throttle, as a delay will be included
# between launches.
#maxfailures=-1

# Wait a minimum of <delay> milliseconds between restarting a failed task.
# This is the lower limit for the delay. The delay may be longer than this,
# see the other settings.
delay=3000

# If you want to exponentially back-off retries, set this to 1. This will
# cause godaemon to wait an additional "2 ^ failure count" seconds between
# restart attempts.
exponentialbackoff=1

# To prevent things getting out of hand with the exponential backoff, set the
# maximum number of seconds that godaemon will wait between restarting tasks.
exponentialmaxtime=120

##############################################################################
# Configure notification settings
##############################################################################
[notifications]

# If you want godaemon to send emails on task failure/restart, set this to 1
sendemail=0

# This is a comma seperated list of email addresses to send notifications to,
# if you have enabled them above
emailaddresses=test@example.com,foo@example.com

# godaemon includes the last few lines of log output when sending notification
# emails. How many lines of output do you want to include?
logtailcount=50

##############################################################################
# Configure task logging
##############################################################################
[logs]

# If you want godaemon to capture the task output (stdout and stderr) and
# write them to a log, set this to 1 (otherwise it is discarded)
capturelogs=1

# 1 = Use the system log path (/var/log/taskname.log)
# 0 = Use the default log path (applicationdir/taskname.log)
systempath=0

# If you want to use a custom log filename or path, then specify the ENTIRE
# file path here. This overrides the <systempath> setting.
custompath=/var/log/piconsole_daemon.log

##############################################################################
# Configure task control
##############################################################################
[control]

# 1 = Restart the task on failure
# 0 = Do not restart the task on failure (godaemon will shut down)
restartonfailure=1

# If you want godaemon to use a PID file to track the task, set this to 1.
# Generally you want this - if you disable this, you will be unable to stop
# the task using godaemon, and it will be possible to start multiple instances
# of the same task.
usepidfile=1

# 1 = Use the system pid path (/var/run/taskname.pid)
# 0 = Use the default pid path (applicationdir/taskname.pid)
systempath=0

# If you want to use a custom pid filename or path, then specify the ENTIRE
# file path here. This overrides the <systempath> setting.
#custompath=/opt/myapp/mytask.pid

# When stopping a task, godaemon will send SIGTERM. How long should godaemon
# wait for the task (in seconds) to stop before reporting failure or giving up?
stoptimeout=1

# If the task fails to stop within the timeout, do you want godaemon to
# forcefully stop the task automatically?
# Note that even if you don't enable this, you can always use the force-stop
# action which has the same effect.
forcestop=1

##############################################################################
# Configure environment variables
##############################################################################
[environment]

# Any keys defined here will be passed to the task as environment variables.
# Key names will be cast to uppercase.
# Keys defined on the command like take priority over the ones in this file.
#MYENVVAR=TEST
#MYVAR2=HELLO
#specialvar=this is a test

##############################################################################
# Configure task monitoring (NRPE support)
##############################################################################
[nrpe]

# When godaemon is called with the nagios-status command, it will usually
# just return "OK" if the task is running or "CRITICAL" if it is not running.
# You can get more detailed information by configuring some of these options.

# Do you want nagios-status to return WARNING if the task has failed recently?
# (within the safety throttle timespan, which by default is 900 seconds) 
alertrecentlyfailed=1

# If your program supports it, your program can ask godaemon to set a custom
# nagios status, for example "WARNING: Database failure" when queried with
# nagios-status. Do you want to enable this?
statusmonitoring=0

# For custom nagios status monitoring to work, godaemon needs to look for a
# specially formatted message in your program output (log). The format is like
# this:
# &<eyecatch>&{OK|WARNING|CRITICAL|UNKNOWN:custom message}
# For example, if your eyecatch is "nagios":
# &nagios&{OK:400 users connected}
# The message can appear in the middle of a log line, the following is valid:
# 2014-01-01T09:30:25 MainProcess(): Update status: &nagios&{OK:No problems}
# The <eyecatch> **MUST** be set if <statusmonitoring> is 1.
eyecatch=nagios

# For custom nagios status monitoring, what status do you want godaemon to
# report by default, until it is given a proper status report?
# Please format this string like this: 
#   defaultstatus=OK|WARNING|CRITICAL|UNKNOWN:Message
# If you don't set it, the default is: OK:Program starting...
defaultstatus=UNKNOWN:No report yet

